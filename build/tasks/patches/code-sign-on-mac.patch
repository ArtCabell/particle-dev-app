--- code-sign-on-mac.js.orig	2017-04-12 12:34:35.000000000 +0100
+++ code-sign-on-mac.js	2017-04-12 12:47:36.000000000 +0100
@@ -5,15 +5,18 @@
 const spawnSync = require('./spawn-sync')
 
 module.exports = function (packagedAppPath) {
-  if (!process.env.ATOM_MAC_CODE_SIGNING_CERT_DOWNLOAD_URL) {
+  if (!process.env.ATOM_MAC_CODE_SIGNING_CERT_DOWNLOAD_URL && !process.env.ATOM_MAC_CODE_SIGNING_CERT_PATH) {
     console.log('Skipping code signing because the ATOM_MAC_CODE_SIGNING_CERT_DOWNLOAD_URL environment variable is not defined'.gray)
     return
   }
 
-  try {
-    const certPath = path.join(os.tmpdir(), 'mac.p12')
-    downloadFileFromGithub(process.env.ATOM_MAC_CODE_SIGNING_CERT_DOWNLOAD_URL, certPath)
+  let certPath = process.env.ATOM_MAC_CODE_SIGNING_CERT_PATH;
+  if (!certPath) {
+    certPath = path.join(os.tmpdir(), 'mac.p12')
+    downloadFileFromGithub(process.env.ATOM_MAC_CODE_SIGNING_CERT_DOWNLOAD_URL, certPath);
+  }
 
+  try {
     console.log(`Unlocking keychain ${process.env.ATOM_MAC_CODE_SIGNING_KEYCHAIN}`)
     const unlockArgs = ['unlock-keychain']
     // For signing on local workstations, password could be entered interactively
@@ -35,10 +38,12 @@
     spawnSync('codesign', [
       '--deep', '--force', '--verbose',
       '--keychain', process.env.ATOM_MAC_CODE_SIGNING_KEYCHAIN,
-      '--sign', 'Developer ID Application: GitHub', packagedAppPath
+      '--sign', 'Developer ID Application: Spark Labs, Inc.', packagedAppPath
     ], {stdio: 'inherit'})
   } finally {
-    console.log(`Deleting certificate at ${certPath}`)
-    fs.removeSync(certPath)
+    if (!process.env.ATOM_MAC_CODE_SIGNING_CERT_PATH) {
+      console.log(`Deleting certificate at ${certPath}`);
+      fs.removeSync(certPath);
+    }
   }
 }
